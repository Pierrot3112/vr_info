{"ast":null,"code":"import axios from \"axios\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport URL from \"../util/api.url\";\nimport NetInfo from '@react-native-community/netinfo';\nimport Toast from 'react-native-toast-message';\nconst api = axios.create({\n  baseURL: URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nconst checkInternetConnection = async () => {\n  const state = await NetInfo.fetch();\n  return state.isConnected;\n};\napi.interceptors.request.use(async config => {\n  const isConnected = await checkInternetConnection();\n  if (!isConnected) {\n    throw new axios.Cancel('Pas de connexion Internet');\n  }\n  try {\n    const token = await AsyncStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  } catch (error) {}\n  return config;\n}, error => Promise.reject(error));\napi.interceptors.response.use(response => response, error => {\n  if (axios.isCancel(error)) {\n    Toast.show({\n      type: \"info\",\n      text1: \"Requête annulée\",\n      text2: error.message\n    });\n  } else if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n    switch (status) {\n      case 400:\n        Toast.show({\n          type: \"error\",\n          text1: \"Requête invalide\",\n          text2: data.message || \"Les données envoyées sont incorrectes.\"\n        });\n        break;\n      case 401:\n        Toast.show({\n          type: \"error\",\n          text1: \"Non autorisé\",\n          text2: \"Votre session a expiré. Veuillez vous reconnecter.\"\n        });\n        break;\n      case 403:\n        Toast.show({\n          type: \"error\",\n          text1: \"Accès interdit\",\n          text2: \"Vous n'avez pas les permissions nécessaires.\"\n        });\n        break;\n      case 404:\n        Toast.show({\n          type: \"error\",\n          text1: \"Non trouvé\",\n          text2: \"La ressource demandée est introuvable.\"\n        });\n        break;\n      case 422:\n        Toast.show({\n          type: \"error\",\n          text1: \"Données invalides\",\n          text2: \"Veuillez vérifier les champs du formulaire.\"\n        });\n        break;\n      case 500:\n        Toast.show({\n          type: \"error\",\n          text1: \"Erreur serveur\",\n          text2: \"Une erreur interne est survenue. Réessayez plus tard.\"\n        });\n        break;\n      case 503:\n        Toast.show({\n          type: \"error\",\n          text1: \"Service indisponible\",\n          text2: \"Le serveur est temporairement indisponible.\"\n        });\n        break;\n      default:\n        Toast.show({\n          type: \"error\",\n          text1: \"Erreur inconnue\",\n          text2: \"Une erreur est survenue, veuillez réessayer.\"\n        });\n    }\n  } else {\n    Toast.show({\n      type: \"error\",\n      text1: \"Erreur réseau\",\n      text2: \"Veuillez vérifier votre connexion Internet.\"\n    });\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","AsyncStorage","URL","NetInfo","Toast","api","create","baseURL","headers","checkInternetConnection","state","fetch","isConnected","interceptors","request","use","config","Cancel","token","getItem","Authorization","error","Promise","reject","response","isCancel","show","type","text1","text2","message","status","data"],"sources":["/media/pierrot-3112/08DE3CDADE3CC22C/dev/Mobile/VoieRapide/config/AxioConfig.tsx"],"sourcesContent":["import axios from \"axios\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport URL from \"../util/api.url\";\nimport NetInfo from '@react-native-community/netinfo';\nimport Toast from 'react-native-toast-message';\n\nconst api = axios.create({\n    baseURL: URL,\n    headers: {\n        \"Content-Type\": \"application/json\",\n    },\n});\n\n// Fonction pour vérifier la connexion Internet\nconst checkInternetConnection = async () => {\n    const state = await NetInfo.fetch();\n    return state.isConnected;\n};\n\n// Intercepteur pour ajouter le token Bearer à chaque requête\napi.interceptors.request.use(\n    async (config) => {\n        const isConnected = await checkInternetConnection();\n        if (!isConnected) {\n            throw new axios.Cancel('Pas de connexion Internet');\n        }\n\n        try {\n            const token = await AsyncStorage.getItem(\"token\"); \n            if (token) {\n                config.headers.Authorization = `Bearer ${token}`;\n            }\n        } catch (error) {\n            // Gestion silencieuse des erreurs liées au token\n        }\n        return config;\n    },\n    (error) => Promise.reject(error)\n);\n\n// Intercepteur pour gérer les erreurs globalement\napi.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        if (axios.isCancel(error)) {\n            Toast.show({\n                type: \"info\",\n                text1: \"Requête annulée\",\n                text2: error.message,\n            });\n        } else if (error.response) {\n            const { status, data } = error.response;\n\n            switch (status) {\n                case 400:\n                    Toast.show({\n                        type: \"error\",\n                        text1: \"Requête invalide\",\n                        text2: data.message || \"Les données envoyées sont incorrectes.\",\n                    });\n                    break;\n                case 401:\n                    Toast.show({\n                        type: \"error\",\n                        text1: \"Non autorisé\",\n                        text2: \"Votre session a expiré. Veuillez vous reconnecter.\",\n                    });\n                    break;\n                case 403:\n                    Toast.show({\n                        type: \"error\",\n                        text1: \"Accès interdit\",\n                        text2: \"Vous n'avez pas les permissions nécessaires.\",\n                    });\n                    break;\n                case 404:\n                    Toast.show({\n                        type: \"error\",\n                        text1: \"Non trouvé\",\n                        text2: \"La ressource demandée est introuvable.\",\n                    });\n                    break;\n                case 422:\n                    Toast.show({\n                        type: \"error\",\n                        text1: \"Données invalides\",\n                        text2: \"Veuillez vérifier les champs du formulaire.\",\n                    });\n                    break;\n                case 500:\n                    Toast.show({\n                        type: \"error\",\n                        text1: \"Erreur serveur\",\n                        text2: \"Une erreur interne est survenue. Réessayez plus tard.\",\n                    });\n                    break;\n                case 503:\n                    Toast.show({\n                        type: \"error\",\n                        text1: \"Service indisponible\",\n                        text2: \"Le serveur est temporairement indisponible.\",\n                    });\n                    break;\n                default:\n                    Toast.show({\n                        type: \"error\",\n                        text1: \"Erreur inconnue\",\n                        text2: \"Une erreur est survenue, veuillez réessayer.\",\n                    });\n            }\n        } else {\n            Toast.show({\n                type: \"error\",\n                text1: \"Erreur réseau\",\n                text2: \"Veuillez vérifier votre connexion Internet.\",\n            });\n        }\n\n        return Promise.reject(error);\n    }\n);\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}