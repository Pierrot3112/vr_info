{"ast":null,"code":"var _jsxFileName = \"/media/pierrot-3112/08DE3CDADE3CC22C/dev/Mobile/VoieRapide/app/screens/HomeUser.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport styles from '../../styles/home.style';\nimport api from '../../config/AxioConfig';\nimport UpdateSegment from '../../components/UpdateSegment';\nimport { COLORS, SIZES } from '../../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeUser = () => {\n  const [segments, setSegments] = useState([]);\n  const [selectedSegment, setSelectedSegment] = useState(null);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchSegments = async () => {\n      try {\n        const response = await api.get('/users/segments');\n        setSegments(response.data);\n      } catch (error) {\n        console.error(\"❌ Erreur lors de la récupération des segments :\", error);\n        setError(\"Erreur lors de la récupération des segments. Veuillez réessayer.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSegments();\n  }, []);\n  const handleSegmentClick = segment => {\n    setSelectedSegment(segment);\n    setModalVisible(true);\n  };\n  return _jsxDEV(SafeAreaView, {\n    style: styles.global,\n    children: [_jsxDEV(View, {\n      style: styles.headerContainer,\n      children: _jsxDEV(Text, {\n        style: styles.headerText,\n        children: \"Mon Espace\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), loading ? _jsxDEV(Text, {\n      style: {\n        marginTop: SIZES.height / 2,\n        textAlign: 'center',\n        color: COLORS.primary\n      },\n      children: \"Chargement en cours ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this) : error ? _jsxDEV(Text, {\n      style: {\n        color: 'red',\n        textAlign: 'center'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this) : _jsxDEV(ScrollView, {\n      style: styles.scrollSegmentContainer,\n      children: segments.map(segment => _jsxDEV(TouchableOpacity, {\n        onPress: () => handleSegmentClick(segment),\n        style: styles.segmentContainer,\n        children: _jsxDEV(View, {\n          children: [_jsxDEV(Text, {\n            children: [\"Segment ID: \", segment.segment_id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 33\n          }, this), _jsxDEV(Text, {\n            children: [segment.point_depart_nom, \" ---\", '>', \" \", segment.point_arrivee_nom]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }, this)\n      }, segment.segment_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this), _jsxDEV(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: () => setModalVisible(false),\n      children: _jsxDEV(UpdateSegment, {\n        selectedSegment: selectedSegment,\n        onClose: () => setModalVisible(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\nexport default HomeUser;","map":{"version":3,"names":["React","useState","useEffect","View","Text","SafeAreaView","ScrollView","TouchableOpacity","Modal","styles","api","UpdateSegment","COLORS","SIZES","jsxDEV","_jsxDEV","HomeUser","segments","setSegments","selectedSegment","setSelectedSegment","modalVisible","setModalVisible","loading","setLoading","error","setError","fetchSegments","response","get","data","console","handleSegmentClick","segment","style","global","children","headerContainer","headerText","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","height","textAlign","color","primary","scrollSegmentContainer","map","onPress","segmentContainer","segment_id","point_depart_nom","point_arrivee_nom","animationType","transparent","visible","onRequestClose","onClose"],"sources":["/media/pierrot-3112/08DE3CDADE3CC22C/dev/Mobile/VoieRapide/app/screens/HomeUser.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, SafeAreaView, ScrollView, TouchableOpacity, Modal } from 'react-native';\nimport styles from '../../styles/home.style';\nimport api from '../../config/AxioConfig'; \nimport UpdateSegment from '../../components/UpdateSegment';\nimport { COLORS, SIZES } from '../../constants';\n\nconst HomeUser = () => {\n    const [segments, setSegments] = useState([]); \n    const [selectedSegment, setSelectedSegment] = useState(null); \n    const [modalVisible, setModalVisible] = useState(false); \n    const [loading, setLoading] = useState(true); \n    const [error, setError] = useState(null); \n\n    // Récupérer les segments depuis l'API\n    useEffect(() => {\n        const fetchSegments = async () => {\n            try {\n                const response = await api.get('/users/segments'); \n                setSegments(response.data); \n            } catch (error) {\n                console.error(\"❌ Erreur lors de la récupération des segments :\", error);\n                setError(\"Erreur lors de la récupération des segments. Veuillez réessayer.\");\n            } finally {\n                setLoading(false); \n            }\n        };\n\n        fetchSegments();\n    }, []);\n\n    // Fonction pour gérer le clic sur un segment\n    const handleSegmentClick = (segment) => {\n        setSelectedSegment(segment); \n        setModalVisible(true); \n    };\n\n    return (\n        <SafeAreaView style={styles.global}>\n            <View style={styles.headerContainer}>\n                <Text style={styles.headerText}>Mon Espace</Text>\n            </View>\n\n            {loading ? (\n                <Text style={{marginTop: SIZES.height/2, textAlign: 'center', color: COLORS.primary, }}>Chargement en cours ...</Text>\n            ) : error ? (\n                <Text style={{ color: 'red', textAlign: 'center' }}>{error}</Text>\n            ) : (\n                <ScrollView style={styles.scrollSegmentContainer}>\n                    {segments.map((segment) => (\n                        <TouchableOpacity\n                            key={segment.segment_id}\n                            onPress={() => handleSegmentClick(segment)}\n                            style={styles.segmentContainer}\n                        >\n                            <View>\n                                <Text>Segment ID: {segment.segment_id}</Text>\n                                <Text>\n                                    {segment.point_depart_nom} ---{'>'} {segment.point_arrivee_nom}\n                                </Text>\n                            </View>\n                        </TouchableOpacity>\n                    ))}\n                </ScrollView>\n            )}\n\n            {/* Modal pour afficher les détails du segment */}\n            <Modal\n                animationType=\"slide\"\n                transparent={true}\n                visible={modalVisible}\n                onRequestClose={() => setModalVisible(false)}\n            >\n                <UpdateSegment\n                    selectedSegment={selectedSegment}\n                    onClose={() => setModalVisible(false)}\n                />\n            </Modal>\n        </SafeAreaView>\n    );\n};\n\nexport default HomeUser;"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}