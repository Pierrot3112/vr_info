{"ast":null,"code":"var _jsxFileName = \"/media/pierrot-3112/08DE3CDADE3CC22C/dev/Mobile/VoieRapide/app/screens/HomeUser.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Ionicons } from '@expo/vector-icons';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport styles from '../../styles/home.style';\nimport api from '../../config/AxioConfig';\nimport UpdateSegment from '../../components/UpdateSegment';\nimport { COLORS, SIZES } from '../../constants';\nimport PullToRefresh from '../../components/PullToRefresh';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeUser = () => {\n  const [segments, setSegments] = useState([]);\n  const [selectedSegment, setSelectedSegment] = useState(null);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchSegments = async () => {\n    try {\n      const response = await api.get('/users/segments');\n      const updatedSegments = response.data.map(segment => {\n        const lastUpdate = new Date(segment.last_update);\n        const now = new Date();\n        if (!isNaN(lastUpdate.getTime())) {\n          const diffInMs = now.getTime() - lastUpdate.getTime();\n          const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n          return Object.assign({}, segment, {\n            diffInMinutes\n          });\n        }\n        return Object.assign({}, segment, {\n          diffInMinutes: null\n        });\n      });\n      setSegments(updatedSegments);\n      setError(null);\n    } catch (error) {\n      setError(\"Erreur lors de la récupération des segments. Veuillez réessayer.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchSegments();\n  }, []);\n  const handleSegmentClick = segment => {\n    setSelectedSegment(segment);\n    setModalVisible(true);\n  };\n  return _jsxDEV(SafeAreaView, {\n    style: styles.global,\n    children: [_jsxDEV(View, {\n      style: styles.headerContainer,\n      children: _jsxDEV(Text, {\n        style: styles.headerText,\n        children: \"Mon Espace\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), loading ? _jsxDEV(Text, {\n      style: {\n        marginTop: SIZES.height / 2,\n        textAlign: 'center',\n        color: COLORS.primary\n      },\n      children: \"Chargement en cours ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this) : error ? _jsxDEV(Text, {\n      style: {\n        color: 'red',\n        textAlign: 'center'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this) : _jsxDEV(PullToRefresh, {\n      onRefresh: fetchSegments,\n      children: _jsxDEV(View, {\n        style: styles.scrollSegmentContainer,\n        children: segments.map(segment => {\n          const segmentStyle = segment.diffInMinutes !== null && segment.diffInMinutes >= 10 ? [styles.segmentContainer, {\n            borderWidth: 2,\n            borderColor: 'red'\n          }] : styles.segmentContainer;\n          return _jsxDEV(TouchableOpacity, {\n            onPress: () => handleSegmentClick(segment),\n            style: segmentStyle,\n            children: _jsxDEV(View, {\n              children: [_jsxDEV(Text, {\n                style: styles.segmentId,\n                children: [\"Numero: \", segment.segment_id, \" \", \"\\n\", segment.last_update]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 41\n              }, this), _jsxDEV(View, {\n                style: styles.point,\n                children: [_jsxDEV(Ionicons, {\n                  name: \"location-outline\",\n                  size: 18,\n                  color: \"green\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 45\n                }, this), _jsxDEV(Text, {\n                  style: styles.textPont,\n                  children: segment.point_depart_nom\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 41\n              }, this), _jsxDEV(View, {\n                style: styles.point,\n                children: [_jsxDEV(Ionicons, {\n                  name: \"flag-outline\",\n                  size: 18,\n                  color: \"red\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 45\n                }, this), _jsxDEV(Text, {\n                  style: styles.textPont,\n                  children: segment.point_arrivee_nom\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 37\n            }, this)\n          }, segment.segment_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), _jsxDEV(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: () => setModalVisible(false),\n      children: _jsxDEV(UpdateSegment, {\n        selectedSegment: selectedSegment,\n        onClose: () => setModalVisible(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\nexport default HomeUser;","map":{"version":3,"names":["React","useState","useEffect","Ionicons","View","Text","SafeAreaView","TouchableOpacity","Modal","styles","api","UpdateSegment","COLORS","SIZES","PullToRefresh","jsxDEV","_jsxDEV","HomeUser","segments","setSegments","selectedSegment","setSelectedSegment","modalVisible","setModalVisible","loading","setLoading","error","setError","fetchSegments","response","get","updatedSegments","data","map","segment","lastUpdate","Date","last_update","now","isNaN","getTime","diffInMs","diffInMinutes","Math","floor","Object","assign","handleSegmentClick","style","global","children","headerContainer","headerText","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","height","textAlign","color","primary","onRefresh","scrollSegmentContainer","segmentStyle","segmentContainer","borderWidth","borderColor","onPress","segmentId","segment_id","point","name","size","textPont","point_depart_nom","point_arrivee_nom","animationType","transparent","visible","onRequestClose","onClose"],"sources":["/media/pierrot-3112/08DE3CDADE3CC22C/dev/Mobile/VoieRapide/app/screens/HomeUser.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Ionicons } from '@expo/vector-icons';\nimport { View, Text, SafeAreaView, TouchableOpacity, Modal } from 'react-native';\nimport styles from '../../styles/home.style';\nimport api from '../../config/AxioConfig'; \nimport UpdateSegment from '../../components/UpdateSegment';\nimport { COLORS, SIZES } from '../../constants';\nimport PullToRefresh from '../../components/PullToRefresh';\n\nconst HomeUser = () => {\n    const [segments, setSegments] = useState([]); \n    const [selectedSegment, setSelectedSegment] = useState(null); \n    const [modalVisible, setModalVisible] = useState(false); \n    const [loading, setLoading] = useState(true); \n    const [error, setError] = useState(null); \n\n    const fetchSegments = async () => {\n        try {\n            const response = await api.get('/users/segments'); \n            const updatedSegments = response.data.map((segment) => {\n                const lastUpdate = new Date(segment.last_update);\n                const now = new Date();\n                \n                if (!isNaN(lastUpdate.getTime())) {\n                    const diffInMs = now.getTime() - lastUpdate.getTime();\n                    const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n\n                    return { ...segment, diffInMinutes };\n                }\n                \n                return { ...segment, diffInMinutes: null };\n            });\n\n            setSegments(updatedSegments);\n            setError(null);\n        } catch (error) {\n            setError(\"Erreur lors de la récupération des segments. Veuillez réessayer.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchSegments();\n    }, []);\n\n    const handleSegmentClick = (segment) => {\n        setSelectedSegment(segment);\n        setModalVisible(true);\n    };\n\n    return (\n        <SafeAreaView style={styles.global}>\n            <View style={styles.headerContainer}>\n                <Text style={styles.headerText}>Mon Espace</Text>\n            </View>\n\n            {loading ? (\n                <Text style={{ marginTop: SIZES.height / 2, textAlign: 'center', color: COLORS.primary }}>\n                    Chargement en cours ...\n                </Text>\n            ) : error ? (\n                <Text style={{ color: 'red', textAlign: 'center' }}>{error}</Text>\n            ) : (\n                <PullToRefresh onRefresh={fetchSegments}>\n                    <View style={styles.scrollSegmentContainer}>\n                        {segments.map((segment) => {\n                            const segmentStyle = segment.diffInMinutes !== null && segment.diffInMinutes >= 10\n                                ? [styles.segmentContainer, { borderWidth: 2, borderColor: 'red' }]\n                                : styles.segmentContainer;\n\n                            return (\n                                <TouchableOpacity\n                                    key={segment.segment_id}\n                                    onPress={() => handleSegmentClick(segment)}\n                                    style={segmentStyle}\n                                >\n                                    <View>\n                                        <Text style={styles.segmentId}>\n                                            Numero: {segment.segment_id} {\"\\n\"}\n                                            {segment.last_update}\n                                        </Text>\n                                        <View style={styles.point}>\n                                            <Ionicons name=\"location-outline\" size={18} color=\"green\" />\n                                            <Text style={styles.textPont}>{segment.point_depart_nom}</Text>\n                                        </View>\n                                        <View style={styles.point}>\n                                            <Ionicons name=\"flag-outline\" size={18} color=\"red\" />\n                                            <Text style={styles.textPont}>{segment.point_arrivee_nom}</Text>\n                                        </View>\n                                    </View>\n                                </TouchableOpacity>\n                            );\n                        })}\n                    </View>\n                </PullToRefresh>\n            )}\n\n            <Modal\n                animationType=\"slide\"\n                transparent={true}\n                visible={modalVisible}\n                onRequestClose={() => setModalVisible(false)}\n            >\n                <UpdateSegment\n                    selectedSegment={selectedSegment}\n                    onClose={() => setModalVisible(false)}\n                />\n            </Modal>\n        </SafeAreaView>\n    );\n};\n\nexport default HomeUser;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}