{"ast":null,"code":"var _jsxFileName = \"/media/pierrot-3112/08DE3CDADE3CC22C/dev/Mobile/VoieRapide/components/PullToRefresh.tsx\";\nimport React, { useState } from 'react';\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PullToRefresh = ({\n  children,\n  onRefresh\n}) => {\n  const [refreshing, setRefreshing] = useState(false);\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    await onRefresh();\n    setRefreshing(false);\n  };\n  return _jsxDEV(ScrollView, {\n    contentContainerStyle: styles.container,\n    refreshControl: _jsxDEV(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: handleRefresh,\n      colors: ['#0000ff'],\n      tintColor: \"#0000ff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    flexGrow: 1\n  }\n});\nexport default PullToRefresh;","map":{"version":3,"names":["React","useState","RefreshControl","ScrollView","StyleSheet","jsxDEV","_jsxDEV","PullToRefresh","children","onRefresh","refreshing","setRefreshing","handleRefresh","contentContainerStyle","styles","container","refreshControl","colors","tintColor","fileName","_jsxFileName","lineNumber","columnNumber","create","flexGrow"],"sources":["/media/pierrot-3112/08DE3CDADE3CC22C/dev/Mobile/VoieRapide/components/PullToRefresh.tsx"],"sourcesContent":["import React, { ReactNode, useState } from 'react';\nimport { RefreshControl, ScrollView, StyleSheet, View } from 'react-native';\n\ninterface PullToRefreshProps {\n    children: ReactNode;\n    onRefresh: () => Promise<void>; \n}\n\nconst PullToRefresh: React.FC<PullToRefreshProps> = ({ children, onRefresh }) => {\n    const [refreshing, setRefreshing] = useState(false);\n\n    // Fonction appelée lors du rafraîchissement\n    const handleRefresh = async () => {\n        setRefreshing(true); \n        await onRefresh(); \n        setRefreshing(false); \n    };\n\n    return (\n        <ScrollView\n            contentContainerStyle={styles.container}\n            refreshControl={\n                <RefreshControl\n                    refreshing={refreshing}\n                    onRefresh={handleRefresh}\n                    colors={['#0000ff']} \n                    tintColor=\"#0000ff\" \n                />\n            }\n        >\n            {children}\n        </ScrollView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flexGrow: 1,\n    },\n});\n\nexport default PullToRefresh;"],"mappings":";AAAA,OAAOA,KAAK,IAAeC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,cAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,UAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQnD,MAAMC,aAA2C,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAU,CAAC,KAAK;EAC7E,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAGnD,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9BD,aAAa,CAAC,IAAI,CAAC;IACnB,MAAMF,SAAS,CAAC,CAAC;IACjBE,aAAa,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,OACIL,OAAA,CAACH,UAAU;IACPU,qBAAqB,EAAEC,MAAM,CAACC,SAAU;IACxCC,cAAc,EACVV,OAAA,CAACJ,cAAc;MACXQ,UAAU,EAAEA,UAAW;MACvBD,SAAS,EAAEG,aAAc;MACzBK,MAAM,EAAE,CAAC,SAAS,CAAE;MACpBC,SAAS,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CACJ;IAAAd,QAAA,EAEAA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAErB,CAAC;AAED,MAAMR,MAAM,GAAGV,UAAU,CAACmB,MAAM,CAAC;EAC7BR,SAAS,EAAE;IACPS,QAAQ,EAAE;EACd;AACJ,CAAC,CAAC;AAEF,eAAejB,aAAa","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}