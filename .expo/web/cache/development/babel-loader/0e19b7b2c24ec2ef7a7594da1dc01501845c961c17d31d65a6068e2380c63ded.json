{"ast":null,"code":"var _jsxFileName = \"/media/pierrot-3112/08DE3CDADE3CC22C/dev/Mobile/VoieRapide/app/context/AuthContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport api from \"../../config/AxioConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOKEN_KEY = \"token\";\nexport const checkToken = async () => {\n  try {\n    const token = await AsyncStorage.getItem(TOKEN_KEY);\n    return token;\n  } catch (error) {\n    console.error(\"❌ Erreur lors de la vérification du token :\", error);\n    return null;\n  }\n};\nconst AuthContext = createContext(undefined);\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth doit être utilisé dans un AuthProvider\");\n  }\n  return context;\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  const [authState, setAuthState] = useState({\n    token: null,\n    authenticated: false\n  });\n  useEffect(() => {\n    const loadToken = async () => {\n      try {\n        const token = await checkToken();\n        if (token) {\n          setAuthState({\n            token,\n            authenticated: true\n          });\n        } else {\n          setAuthState({\n            token: null,\n            authenticated: false\n          });\n        }\n      } catch (error) {\n        console.error(\"❌ Erreur lors du chargement du token :\", error);\n      }\n    };\n    loadToken();\n  }, []);\n  const login = async (num_tel, password) => {\n    try {\n      const response = await api.post(\"/token\", {\n        num_tel,\n        password\n      });\n      const token = response.data.access_token;\n      await AsyncStorage.setItem(TOKEN_KEY, token);\n      setAuthState({\n        token,\n        authenticated: true\n      });\n      return {\n        error: false,\n        msg: \"Connexion réussie\"\n      };\n    } catch (error) {\n      return {\n        error: true,\n        msg: error.response?.data?.msg || \"Échec de la connexion\"\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await AsyncStorage.removeItem(TOKEN_KEY);\n      setAuthState({\n        token: null,\n        authenticated: false\n      });\n    } catch (error) {\n      console.error(\"❌ Erreur lors de la déconnexion :\", error);\n    }\n  };\n  const getRole = async token => {\n    if (!token) throw new Error(\"Aucun token fourni\");\n    try {\n      const response = await api.get(\"/role\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data.role;\n    } catch (error) {\n      throw error;\n    }\n  };\n  return _jsxDEV(AuthContext.Provider, {\n    value: {\n      authState,\n      onLogin: login,\n      onLogout: logout,\n      checkToken,\n      getRole\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\nexport default AuthContext;","map":{"version":3,"names":["createContext","useContext","useEffect","useState","AsyncStorage","api","jsxDEV","_jsxDEV","TOKEN_KEY","checkToken","token","getItem","error","console","AuthContext","undefined","useAuth","context","Error","AuthProvider","children","authState","setAuthState","authenticated","loadToken","login","num_tel","password","response","post","data","access_token","setItem","msg","logout","removeItem","getRole","get","headers","Authorization","role","Provider","value","onLogin","onLogout","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/media/pierrot-3112/08DE3CDADE3CC22C/dev/Mobile/VoieRapide/app/context/AuthContext.tsx"],"sourcesContent":["// AuthContext.tsx\nimport { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport api from \"../../config/AxioConfig\";\n\nconst TOKEN_KEY = \"token\";\n\n// Fonction pour vérifier le token stocké\nexport const checkToken = async (): Promise<string | null> => {\n  try {\n    const token = await AsyncStorage.getItem(TOKEN_KEY);\n    return token;\n  } catch (error) {\n    console.error(\"❌ Erreur lors de la vérification du token :\", error);\n    return null;\n  }\n};\n\ninterface AuthState {\n  token: string | null;\n  authenticated: boolean;\n}\n\ninterface AuthContextProps {\n  authState: AuthState;\n  onLogin: (num_tel: string, password: string) => Promise<{ error?: boolean; msg?: string }>;\n  onLogout: () => void;\n  checkToken: () => Promise<string | null>;\n  getRole: (token: string | null) => Promise<string>;\n}\n\nconst AuthContext = createContext<AuthContextProps | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth doit être utilisé dans un AuthProvider\");\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [authState, setAuthState] = useState<AuthState>({ token: null, authenticated: false });\n\n  useEffect(() => {\n    const loadToken = async () => {\n      try {\n        const token = await checkToken();\n        if (token) {\n          setAuthState({ token, authenticated: true });\n        } else {\n          setAuthState({ token: null, authenticated: false });\n        }\n      } catch (error) {\n        console.error(\"❌ Erreur lors du chargement du token :\", error);\n      }\n    };\n    loadToken();\n  }, []);\n\n  const login = async (num_tel: string, password: string) => {\n    try {\n      const response = await api.post(\"/token\", { num_tel, password });\n      const token = response.data.access_token;\n\n      await AsyncStorage.setItem(TOKEN_KEY, token);\n      setAuthState({ token, authenticated: true });\n\n      return { error: false, msg: \"Connexion réussie\" };\n    } catch (error: any) {\n      return { error: true, msg: error.response?.data?.msg || \"Échec de la connexion\" };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await AsyncStorage.removeItem(TOKEN_KEY);\n      setAuthState({ token: null, authenticated: false });\n    } catch (error) {\n      console.error(\"❌ Erreur lors de la déconnexion :\", error);\n    }\n  };\n\n  // Implémentation de getRole qui appelle l'API pour récupérer le rôle\n  const getRole = async (token: string | null): Promise<string> => {\n    if (!token) throw new Error(\"Aucun token fourni\");\n    try {\n      const response = await api.get(\"/role\", {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      return response.data.role; // Assurez-vous que la réponse contient la propriété \"role\"\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ authState, onLogin: login, onLogout: logout, checkToken, getRole }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}